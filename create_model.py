#!/usr/bin/env python

"""Create model with optimized parameters and training data.


Usage:
  create_model.py -i <best_chromosome_file> -b <binding_residue_file> -p <pssms_file> -o <output_pickled_model_file>
  create_model.py (-h | --help)
  create_model.py --version

Options:
  -i          best chromosome file generated by genetic_algorithm.py. 
  -b          binding residue file.
  -p          pssms file.
  -o          output pickled model file.
  -h --help   Show this screen.
  --version   Show version.
"""


import pickle
from docopt import docopt
from pybrain.tools.shortcuts     import buildNetwork
from pybrain.supervised.trainers import BackpropTrainer
from pybrain.datasets            import SupervisedDataSet
from pybrain.structure.modules   import SigmoidLayer
from sklearn.ensemble            import RandomForestClassifier 
from sklearn import svm
import feature
import dataset
import common


def create_train_labels_and_dataset(positive_dataset, negative_dataset):
    train_labels = [1]*len(positive_dataset) + [0]*len(negative_dataset)
    train_dataset = positive_dataset + negative_dataset
    return train_labels, train_dataset


def create_NN_classifier(genes, positive_dataset, negative_dataset):
    maxEpochs_for_trainer = 60
    node_num, learning_rate, window_size = genes
    node_num, learning_rate, window_size = int(node_num), float(learning_rate), int(window_size)
    train_labels, train_dataset = create_train_labels_and_dataset(positive_dataset, negative_dataset) 
    indim = 21 * (2 * window_size + 1)
    ds = SupervisedDataSet(indim, 1)
    for i in xrange(len(train_labels)):
        ds.appendLinked(train_dataset[i], [train_labels[i]])
    net = buildNetwork(indim, node_num, 1, outclass=SigmoidLayer, bias=True)
    trainer = BackpropTrainer(net, ds, learningrate=learning_rate)
    trainer.trainUntilConvergence(maxEpochs=maxEpochs_for_trainer)
    return net


def create_RF_classifier(genes, positive_dataset, negative_dataset):
    n_estimators, max_features, window_size = map(int, genes)
    train_labels, train_dataset = create_train_labels_and_dataset(positive_dataset, negative_dataset) 
    indim = 21 * (2 * window_size + 1)
    clf = RandomForestClassifier(n_estimators=n_estimators, max_features=max_features)
    clf.fit(train_dataset, train_labels)
    return clf


def create_SVM_classifier(genes, positive_dataset, negative_dataset):
    cost, gamma, window_size = genes
    cost, gamma, window_size = float(cost), float(gamma), int(window_size)
    train_labels, train_dataset = create_train_labels_and_dataset(positive_dataset, negative_dataset) 
    indim = 21 * (2 * window_size + 1)
    clf = svm.SVC(C=cost, gamma=gamma, class_weight='auto')
    clf.fit(train_dataset, train_labels)
    return clf
 

def create_classifier(method_and_genes, positive_dataset, negative_dataset):
    method, genes = method_and_genes[0], method_and_genes[1:]
    if method == "neuralNetwork":
        return create_NN_classifier(genes, positive_dataset, negative_dataset)
    elif method == "randomForest":
        return create_RF_classifier(genes, positive_dataset, negative_dataset)
    elif method == "SVM":
        return create_SVM_classifier(genes, positive_dataset, negative_dataset)
    else:
        raise ValueError("method must be neuralNetwork or randomForest or SVM [{}]".format(method))


if __name__ == "__main__":
    arguments = docopt(__doc__)
    best_chromosome_file = arguments['<best_chromosome_file>']
    bindres_file = arguments['<binding_residue_file>']
    pssms_file = arguments['<pssms_file>']
    output_pickled_model_file = arguments['<output_pickled_model_file>']
    method_and_genes = common.get_method_and_genes(best_chromosome_file)
    bindingResidueData, pssmData = feature.parse_record_files(bindres_file, pssms_file)
    positive_dataset, negative_dataset = feature.create_dataset(bindingResidueData, pssmData, int(method_and_genes[3]))
    clf_or_net = create_classifier(method_and_genes, positive_dataset, negative_dataset)
    with open(output_pickled_model_file, 'wb') as fp:
        pickle.dump(clf_or_net, fp)
